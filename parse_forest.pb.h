// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/parse_forest.proto

#ifndef PROTOBUF_proto_2fparse_5fforest_2eproto__INCLUDED
#define PROTOBUF_proto_2fparse_5fforest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace nlu {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fparse_5fforest_2eproto();
void protobuf_AssignDesc_proto_2fparse_5fforest_2eproto();
void protobuf_ShutdownFile_proto_2fparse_5fforest_2eproto();

class BasicUnit;
class ForestSentence;
class HyperEdgeInfo;
class NodeInfo;
class ParseForest;

// ===================================================================

class NodeInfo : public ::google::protobuf::Message {
 public:
  NodeInfo();
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeInfo& default_instance();

  void Swap(NodeInfo* other);

  // implements Message ----------------------------------------------

  inline NodeInfo* New() const { return New(NULL); }

  NodeInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  ::google::protobuf::int32 start() const;
  void set_start(::google::protobuf::int32 value);

  // optional int32 end = 2;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::google::protobuf::int32 end() const;
  void set_end(::google::protobuf::int32 value);

  // optional int32 label = 3;
  void clear_label();
  static const int kLabelFieldNumber = 3;
  ::google::protobuf::int32 label() const;
  void set_label(::google::protobuf::int32 value);

  // optional int32 upper = 4;
  void clear_upper();
  static const int kUpperFieldNumber = 4;
  ::google::protobuf::int32 upper() const;
  void set_upper(::google::protobuf::int32 value);

  // optional int32 basic_unit = 5;
  void clear_basic_unit();
  static const int kBasicUnitFieldNumber = 5;
  ::google::protobuf::int32 basic_unit() const;
  void set_basic_unit(::google::protobuf::int32 value);

  // optional float inside_score = 6;
  void clear_inside_score();
  static const int kInsideScoreFieldNumber = 6;
  float inside_score() const;
  void set_inside_score(float value);

  // optional float outside_score = 7;
  void clear_outside_score();
  static const int kOutsideScoreFieldNumber = 7;
  float outside_score() const;
  void set_outside_score(float value);

  // optional int32 headword_stt = 8;
  void clear_headword_stt();
  static const int kHeadwordSttFieldNumber = 8;
  ::google::protobuf::int32 headword_stt() const;
  void set_headword_stt(::google::protobuf::int32 value);

  // optional int32 headword_end = 9;
  void clear_headword_end();
  static const int kHeadwordEndFieldNumber = 9;
  ::google::protobuf::int32 headword_end() const;
  void set_headword_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nlu.NodeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::int32 end_;
  ::google::protobuf::int32 label_;
  ::google::protobuf::int32 upper_;
  ::google::protobuf::int32 basic_unit_;
  float inside_score_;
  float outside_score_;
  ::google::protobuf::int32 headword_stt_;
  ::google::protobuf::int32 headword_end_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fparse_5fforest_2eproto();
  friend void protobuf_AssignDesc_proto_2fparse_5fforest_2eproto();
  friend void protobuf_ShutdownFile_proto_2fparse_5fforest_2eproto();

  void InitAsDefaultInstance();
  static NodeInfo* default_instance_;
};
// -------------------------------------------------------------------

class HyperEdgeInfo : public ::google::protobuf::Message {
 public:
  HyperEdgeInfo();
  virtual ~HyperEdgeInfo();

  HyperEdgeInfo(const HyperEdgeInfo& from);

  inline HyperEdgeInfo& operator=(const HyperEdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HyperEdgeInfo& default_instance();

  void Swap(HyperEdgeInfo* other);

  // implements Message ----------------------------------------------

  inline HyperEdgeInfo* New() const { return New(NULL); }

  HyperEdgeInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HyperEdgeInfo& from);
  void MergeFrom(const HyperEdgeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HyperEdgeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float merit = 1;
  void clear_merit();
  static const int kMeritFieldNumber = 1;
  float merit() const;
  void set_merit(float value);

  // optional int32 head_idx = 2;
  void clear_head_idx();
  static const int kHeadIdxFieldNumber = 2;
  ::google::protobuf::int32 head_idx() const;
  void set_head_idx(::google::protobuf::int32 value);

  // repeated int32 tail_idx = 3;
  int tail_idx_size() const;
  void clear_tail_idx();
  static const int kTailIdxFieldNumber = 3;
  ::google::protobuf::int32 tail_idx(int index) const;
  void set_tail_idx(int index, ::google::protobuf::int32 value);
  void add_tail_idx(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      tail_idx() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_tail_idx();

  // @@protoc_insertion_point(class_scope:nlu.HyperEdgeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float merit_;
  ::google::protobuf::int32 head_idx_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > tail_idx_;
  mutable int _tail_idx_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fparse_5fforest_2eproto();
  friend void protobuf_AssignDesc_proto_2fparse_5fforest_2eproto();
  friend void protobuf_ShutdownFile_proto_2fparse_5fforest_2eproto();

  void InitAsDefaultInstance();
  static HyperEdgeInfo* default_instance_;
};
// -------------------------------------------------------------------

class BasicUnit : public ::google::protobuf::Message {
 public:
  BasicUnit();
  virtual ~BasicUnit();

  BasicUnit(const BasicUnit& from);

  inline BasicUnit& operator=(const BasicUnit& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicUnit& default_instance();

  void Swap(BasicUnit* other);

  // implements Message ----------------------------------------------

  inline BasicUnit* New() const { return New(NULL); }

  BasicUnit* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BasicUnit& from);
  void MergeFrom(const BasicUnit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BasicUnit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  ::google::protobuf::int32 start() const;
  void set_start(::google::protobuf::int32 value);

  // optional int32 end = 2;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::google::protobuf::int32 end() const;
  void set_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nlu.BasicUnit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::int32 end_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fparse_5fforest_2eproto();
  friend void protobuf_AssignDesc_proto_2fparse_5fforest_2eproto();
  friend void protobuf_ShutdownFile_proto_2fparse_5fforest_2eproto();

  void InitAsDefaultInstance();
  static BasicUnit* default_instance_;
};
// -------------------------------------------------------------------

class ParseForest : public ::google::protobuf::Message {
 public:
  ParseForest();
  virtual ~ParseForest();

  ParseForest(const ParseForest& from);

  inline ParseForest& operator=(const ParseForest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParseForest& default_instance();

  void Swap(ParseForest* other);

  // implements Message ----------------------------------------------

  inline ParseForest* New() const { return New(NULL); }

  ParseForest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParseForest& from);
  void MergeFrom(const ParseForest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ParseForest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float logz = 1;
  void clear_logz();
  static const int kLogzFieldNumber = 1;
  float logz() const;
  void set_logz(float value);

  // repeated .nlu.NodeInfo nodes = 2;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 2;
  const ::nlu::NodeInfo& nodes(int index) const;
  ::nlu::NodeInfo* mutable_nodes(int index);
  ::nlu::NodeInfo* add_nodes();
  ::google::protobuf::RepeatedPtrField< ::nlu::NodeInfo >*
      mutable_nodes();
  const ::google::protobuf::RepeatedPtrField< ::nlu::NodeInfo >&
      nodes() const;

  // repeated .nlu.HyperEdgeInfo edges = 3;
  int edges_size() const;
  void clear_edges();
  static const int kEdgesFieldNumber = 3;
  const ::nlu::HyperEdgeInfo& edges(int index) const;
  ::nlu::HyperEdgeInfo* mutable_edges(int index);
  ::nlu::HyperEdgeInfo* add_edges();
  ::google::protobuf::RepeatedPtrField< ::nlu::HyperEdgeInfo >*
      mutable_edges();
  const ::google::protobuf::RepeatedPtrField< ::nlu::HyperEdgeInfo >&
      edges() const;

  // repeated int32 starting_indexes = 4;
  int starting_indexes_size() const;
  void clear_starting_indexes();
  static const int kStartingIndexesFieldNumber = 4;
  ::google::protobuf::int32 starting_indexes(int index) const;
  void set_starting_indexes(int index, ::google::protobuf::int32 value);
  void add_starting_indexes(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      starting_indexes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_starting_indexes();

  // optional int32 num_of_top_nodes = 5;
  void clear_num_of_top_nodes();
  static const int kNumOfTopNodesFieldNumber = 5;
  ::google::protobuf::int32 num_of_top_nodes() const;
  void set_num_of_top_nodes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nlu.ParseForest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::nlu::NodeInfo > nodes_;
  ::google::protobuf::RepeatedPtrField< ::nlu::HyperEdgeInfo > edges_;
  float logz_;
  ::google::protobuf::int32 num_of_top_nodes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > starting_indexes_;
  mutable int _starting_indexes_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fparse_5fforest_2eproto();
  friend void protobuf_AssignDesc_proto_2fparse_5fforest_2eproto();
  friend void protobuf_ShutdownFile_proto_2fparse_5fforest_2eproto();

  void InitAsDefaultInstance();
  static ParseForest* default_instance_;
};
// -------------------------------------------------------------------

class ForestSentence : public ::google::protobuf::Message {
 public:
  ForestSentence();
  virtual ~ForestSentence();

  ForestSentence(const ForestSentence& from);

  inline ForestSentence& operator=(const ForestSentence& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForestSentence& default_instance();

  void Swap(ForestSentence* other);

  // implements Message ----------------------------------------------

  inline ForestSentence* New() const { return New(NULL); }

  ForestSentence* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForestSentence& from);
  void MergeFrom(const ForestSentence& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ForestSentence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tokens = 1;
  int tokens_size() const;
  void clear_tokens();
  static const int kTokensFieldNumber = 1;
  const ::std::string& tokens(int index) const;
  ::std::string* mutable_tokens(int index);
  void set_tokens(int index, const ::std::string& value);
  void set_tokens(int index, const char* value);
  void set_tokens(int index, const char* value, size_t size);
  ::std::string* add_tokens();
  void add_tokens(const ::std::string& value);
  void add_tokens(const char* value);
  void add_tokens(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tokens() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tokens();

  // repeated .nlu.BasicUnit basic_units = 2;
  int basic_units_size() const;
  void clear_basic_units();
  static const int kBasicUnitsFieldNumber = 2;
  const ::nlu::BasicUnit& basic_units(int index) const;
  ::nlu::BasicUnit* mutable_basic_units(int index);
  ::nlu::BasicUnit* add_basic_units();
  ::google::protobuf::RepeatedPtrField< ::nlu::BasicUnit >*
      mutable_basic_units();
  const ::google::protobuf::RepeatedPtrField< ::nlu::BasicUnit >&
      basic_units() const;

  // optional .nlu.ParseForest forest = 3;
  bool has_forest() const;
  void clear_forest();
  static const int kForestFieldNumber = 3;
  const ::nlu::ParseForest& forest() const;
  ::nlu::ParseForest* mutable_forest();
  ::nlu::ParseForest* release_forest();
  void set_allocated_forest(::nlu::ParseForest* forest);

  // @@protoc_insertion_point(class_scope:nlu.ForestSentence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tokens_;
  ::google::protobuf::RepeatedPtrField< ::nlu::BasicUnit > basic_units_;
  ::nlu::ParseForest* forest_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fparse_5fforest_2eproto();
  friend void protobuf_AssignDesc_proto_2fparse_5fforest_2eproto();
  friend void protobuf_ShutdownFile_proto_2fparse_5fforest_2eproto();

  void InitAsDefaultInstance();
  static ForestSentence* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeInfo

// optional int32 start = 1;
inline void NodeInfo::clear_start() {
  start_ = 0;
}
inline ::google::protobuf::int32 NodeInfo::start() const {
  // @@protoc_insertion_point(field_get:nlu.NodeInfo.start)
  return start_;
}
inline void NodeInfo::set_start(::google::protobuf::int32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:nlu.NodeInfo.start)
}

// optional int32 end = 2;
inline void NodeInfo::clear_end() {
  end_ = 0;
}
inline ::google::protobuf::int32 NodeInfo::end() const {
  // @@protoc_insertion_point(field_get:nlu.NodeInfo.end)
  return end_;
}
inline void NodeInfo::set_end(::google::protobuf::int32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:nlu.NodeInfo.end)
}

// optional int32 label = 3;
inline void NodeInfo::clear_label() {
  label_ = 0;
}
inline ::google::protobuf::int32 NodeInfo::label() const {
  // @@protoc_insertion_point(field_get:nlu.NodeInfo.label)
  return label_;
}
inline void NodeInfo::set_label(::google::protobuf::int32 value) {
  
  label_ = value;
  // @@protoc_insertion_point(field_set:nlu.NodeInfo.label)
}

// optional int32 upper = 4;
inline void NodeInfo::clear_upper() {
  upper_ = 0;
}
inline ::google::protobuf::int32 NodeInfo::upper() const {
  // @@protoc_insertion_point(field_get:nlu.NodeInfo.upper)
  return upper_;
}
inline void NodeInfo::set_upper(::google::protobuf::int32 value) {
  
  upper_ = value;
  // @@protoc_insertion_point(field_set:nlu.NodeInfo.upper)
}

// optional int32 basic_unit = 5;
inline void NodeInfo::clear_basic_unit() {
  basic_unit_ = 0;
}
inline ::google::protobuf::int32 NodeInfo::basic_unit() const {
  // @@protoc_insertion_point(field_get:nlu.NodeInfo.basic_unit)
  return basic_unit_;
}
inline void NodeInfo::set_basic_unit(::google::protobuf::int32 value) {
  
  basic_unit_ = value;
  // @@protoc_insertion_point(field_set:nlu.NodeInfo.basic_unit)
}

// optional float inside_score = 6;
inline void NodeInfo::clear_inside_score() {
  inside_score_ = 0;
}
inline float NodeInfo::inside_score() const {
  // @@protoc_insertion_point(field_get:nlu.NodeInfo.inside_score)
  return inside_score_;
}
inline void NodeInfo::set_inside_score(float value) {
  
  inside_score_ = value;
  // @@protoc_insertion_point(field_set:nlu.NodeInfo.inside_score)
}

// optional float outside_score = 7;
inline void NodeInfo::clear_outside_score() {
  outside_score_ = 0;
}
inline float NodeInfo::outside_score() const {
  // @@protoc_insertion_point(field_get:nlu.NodeInfo.outside_score)
  return outside_score_;
}
inline void NodeInfo::set_outside_score(float value) {
  
  outside_score_ = value;
  // @@protoc_insertion_point(field_set:nlu.NodeInfo.outside_score)
}

// optional int32 headword_stt = 8;
inline void NodeInfo::clear_headword_stt() {
  headword_stt_ = 0;
}
inline ::google::protobuf::int32 NodeInfo::headword_stt() const {
  // @@protoc_insertion_point(field_get:nlu.NodeInfo.headword_stt)
  return headword_stt_;
}
inline void NodeInfo::set_headword_stt(::google::protobuf::int32 value) {
  
  headword_stt_ = value;
  // @@protoc_insertion_point(field_set:nlu.NodeInfo.headword_stt)
}

// optional int32 headword_end = 9;
inline void NodeInfo::clear_headword_end() {
  headword_end_ = 0;
}
inline ::google::protobuf::int32 NodeInfo::headword_end() const {
  // @@protoc_insertion_point(field_get:nlu.NodeInfo.headword_end)
  return headword_end_;
}
inline void NodeInfo::set_headword_end(::google::protobuf::int32 value) {
  
  headword_end_ = value;
  // @@protoc_insertion_point(field_set:nlu.NodeInfo.headword_end)
}

// -------------------------------------------------------------------

// HyperEdgeInfo

// optional float merit = 1;
inline void HyperEdgeInfo::clear_merit() {
  merit_ = 0;
}
inline float HyperEdgeInfo::merit() const {
  // @@protoc_insertion_point(field_get:nlu.HyperEdgeInfo.merit)
  return merit_;
}
inline void HyperEdgeInfo::set_merit(float value) {
  
  merit_ = value;
  // @@protoc_insertion_point(field_set:nlu.HyperEdgeInfo.merit)
}

// optional int32 head_idx = 2;
inline void HyperEdgeInfo::clear_head_idx() {
  head_idx_ = 0;
}
inline ::google::protobuf::int32 HyperEdgeInfo::head_idx() const {
  // @@protoc_insertion_point(field_get:nlu.HyperEdgeInfo.head_idx)
  return head_idx_;
}
inline void HyperEdgeInfo::set_head_idx(::google::protobuf::int32 value) {
  
  head_idx_ = value;
  // @@protoc_insertion_point(field_set:nlu.HyperEdgeInfo.head_idx)
}

// repeated int32 tail_idx = 3;
inline int HyperEdgeInfo::tail_idx_size() const {
  return tail_idx_.size();
}
inline void HyperEdgeInfo::clear_tail_idx() {
  tail_idx_.Clear();
}
inline ::google::protobuf::int32 HyperEdgeInfo::tail_idx(int index) const {
  // @@protoc_insertion_point(field_get:nlu.HyperEdgeInfo.tail_idx)
  return tail_idx_.Get(index);
}
inline void HyperEdgeInfo::set_tail_idx(int index, ::google::protobuf::int32 value) {
  tail_idx_.Set(index, value);
  // @@protoc_insertion_point(field_set:nlu.HyperEdgeInfo.tail_idx)
}
inline void HyperEdgeInfo::add_tail_idx(::google::protobuf::int32 value) {
  tail_idx_.Add(value);
  // @@protoc_insertion_point(field_add:nlu.HyperEdgeInfo.tail_idx)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HyperEdgeInfo::tail_idx() const {
  // @@protoc_insertion_point(field_list:nlu.HyperEdgeInfo.tail_idx)
  return tail_idx_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HyperEdgeInfo::mutable_tail_idx() {
  // @@protoc_insertion_point(field_mutable_list:nlu.HyperEdgeInfo.tail_idx)
  return &tail_idx_;
}

// -------------------------------------------------------------------

// BasicUnit

// optional int32 start = 1;
inline void BasicUnit::clear_start() {
  start_ = 0;
}
inline ::google::protobuf::int32 BasicUnit::start() const {
  // @@protoc_insertion_point(field_get:nlu.BasicUnit.start)
  return start_;
}
inline void BasicUnit::set_start(::google::protobuf::int32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:nlu.BasicUnit.start)
}

// optional int32 end = 2;
inline void BasicUnit::clear_end() {
  end_ = 0;
}
inline ::google::protobuf::int32 BasicUnit::end() const {
  // @@protoc_insertion_point(field_get:nlu.BasicUnit.end)
  return end_;
}
inline void BasicUnit::set_end(::google::protobuf::int32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:nlu.BasicUnit.end)
}

// -------------------------------------------------------------------

// ParseForest

// optional float logz = 1;
inline void ParseForest::clear_logz() {
  logz_ = 0;
}
inline float ParseForest::logz() const {
  // @@protoc_insertion_point(field_get:nlu.ParseForest.logz)
  return logz_;
}
inline void ParseForest::set_logz(float value) {
  
  logz_ = value;
  // @@protoc_insertion_point(field_set:nlu.ParseForest.logz)
}

// repeated .nlu.NodeInfo nodes = 2;
inline int ParseForest::nodes_size() const {
  return nodes_.size();
}
inline void ParseForest::clear_nodes() {
  nodes_.Clear();
}
inline const ::nlu::NodeInfo& ParseForest::nodes(int index) const {
  // @@protoc_insertion_point(field_get:nlu.ParseForest.nodes)
  return nodes_.Get(index);
}
inline ::nlu::NodeInfo* ParseForest::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:nlu.ParseForest.nodes)
  return nodes_.Mutable(index);
}
inline ::nlu::NodeInfo* ParseForest::add_nodes() {
  // @@protoc_insertion_point(field_add:nlu.ParseForest.nodes)
  return nodes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::nlu::NodeInfo >*
ParseForest::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:nlu.ParseForest.nodes)
  return &nodes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::nlu::NodeInfo >&
ParseForest::nodes() const {
  // @@protoc_insertion_point(field_list:nlu.ParseForest.nodes)
  return nodes_;
}

// repeated .nlu.HyperEdgeInfo edges = 3;
inline int ParseForest::edges_size() const {
  return edges_.size();
}
inline void ParseForest::clear_edges() {
  edges_.Clear();
}
inline const ::nlu::HyperEdgeInfo& ParseForest::edges(int index) const {
  // @@protoc_insertion_point(field_get:nlu.ParseForest.edges)
  return edges_.Get(index);
}
inline ::nlu::HyperEdgeInfo* ParseForest::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:nlu.ParseForest.edges)
  return edges_.Mutable(index);
}
inline ::nlu::HyperEdgeInfo* ParseForest::add_edges() {
  // @@protoc_insertion_point(field_add:nlu.ParseForest.edges)
  return edges_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::nlu::HyperEdgeInfo >*
ParseForest::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:nlu.ParseForest.edges)
  return &edges_;
}
inline const ::google::protobuf::RepeatedPtrField< ::nlu::HyperEdgeInfo >&
ParseForest::edges() const {
  // @@protoc_insertion_point(field_list:nlu.ParseForest.edges)
  return edges_;
}

// repeated int32 starting_indexes = 4;
inline int ParseForest::starting_indexes_size() const {
  return starting_indexes_.size();
}
inline void ParseForest::clear_starting_indexes() {
  starting_indexes_.Clear();
}
inline ::google::protobuf::int32 ParseForest::starting_indexes(int index) const {
  // @@protoc_insertion_point(field_get:nlu.ParseForest.starting_indexes)
  return starting_indexes_.Get(index);
}
inline void ParseForest::set_starting_indexes(int index, ::google::protobuf::int32 value) {
  starting_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:nlu.ParseForest.starting_indexes)
}
inline void ParseForest::add_starting_indexes(::google::protobuf::int32 value) {
  starting_indexes_.Add(value);
  // @@protoc_insertion_point(field_add:nlu.ParseForest.starting_indexes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ParseForest::starting_indexes() const {
  // @@protoc_insertion_point(field_list:nlu.ParseForest.starting_indexes)
  return starting_indexes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ParseForest::mutable_starting_indexes() {
  // @@protoc_insertion_point(field_mutable_list:nlu.ParseForest.starting_indexes)
  return &starting_indexes_;
}

// optional int32 num_of_top_nodes = 5;
inline void ParseForest::clear_num_of_top_nodes() {
  num_of_top_nodes_ = 0;
}
inline ::google::protobuf::int32 ParseForest::num_of_top_nodes() const {
  // @@protoc_insertion_point(field_get:nlu.ParseForest.num_of_top_nodes)
  return num_of_top_nodes_;
}
inline void ParseForest::set_num_of_top_nodes(::google::protobuf::int32 value) {
  
  num_of_top_nodes_ = value;
  // @@protoc_insertion_point(field_set:nlu.ParseForest.num_of_top_nodes)
}

// -------------------------------------------------------------------

// ForestSentence

// repeated string tokens = 1;
inline int ForestSentence::tokens_size() const {
  return tokens_.size();
}
inline void ForestSentence::clear_tokens() {
  tokens_.Clear();
}
inline const ::std::string& ForestSentence::tokens(int index) const {
  // @@protoc_insertion_point(field_get:nlu.ForestSentence.tokens)
  return tokens_.Get(index);
}
inline ::std::string* ForestSentence::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:nlu.ForestSentence.tokens)
  return tokens_.Mutable(index);
}
inline void ForestSentence::set_tokens(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:nlu.ForestSentence.tokens)
  tokens_.Mutable(index)->assign(value);
}
inline void ForestSentence::set_tokens(int index, const char* value) {
  tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nlu.ForestSentence.tokens)
}
inline void ForestSentence::set_tokens(int index, const char* value, size_t size) {
  tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nlu.ForestSentence.tokens)
}
inline ::std::string* ForestSentence::add_tokens() {
  return tokens_.Add();
}
inline void ForestSentence::add_tokens(const ::std::string& value) {
  tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nlu.ForestSentence.tokens)
}
inline void ForestSentence::add_tokens(const char* value) {
  tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nlu.ForestSentence.tokens)
}
inline void ForestSentence::add_tokens(const char* value, size_t size) {
  tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nlu.ForestSentence.tokens)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ForestSentence::tokens() const {
  // @@protoc_insertion_point(field_list:nlu.ForestSentence.tokens)
  return tokens_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ForestSentence::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:nlu.ForestSentence.tokens)
  return &tokens_;
}

// repeated .nlu.BasicUnit basic_units = 2;
inline int ForestSentence::basic_units_size() const {
  return basic_units_.size();
}
inline void ForestSentence::clear_basic_units() {
  basic_units_.Clear();
}
inline const ::nlu::BasicUnit& ForestSentence::basic_units(int index) const {
  // @@protoc_insertion_point(field_get:nlu.ForestSentence.basic_units)
  return basic_units_.Get(index);
}
inline ::nlu::BasicUnit* ForestSentence::mutable_basic_units(int index) {
  // @@protoc_insertion_point(field_mutable:nlu.ForestSentence.basic_units)
  return basic_units_.Mutable(index);
}
inline ::nlu::BasicUnit* ForestSentence::add_basic_units() {
  // @@protoc_insertion_point(field_add:nlu.ForestSentence.basic_units)
  return basic_units_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::nlu::BasicUnit >*
ForestSentence::mutable_basic_units() {
  // @@protoc_insertion_point(field_mutable_list:nlu.ForestSentence.basic_units)
  return &basic_units_;
}
inline const ::google::protobuf::RepeatedPtrField< ::nlu::BasicUnit >&
ForestSentence::basic_units() const {
  // @@protoc_insertion_point(field_list:nlu.ForestSentence.basic_units)
  return basic_units_;
}

// optional .nlu.ParseForest forest = 3;
inline bool ForestSentence::has_forest() const {
  return !_is_default_instance_ && forest_ != NULL;
}
inline void ForestSentence::clear_forest() {
  if (GetArenaNoVirtual() == NULL && forest_ != NULL) delete forest_;
  forest_ = NULL;
}
inline const ::nlu::ParseForest& ForestSentence::forest() const {
  // @@protoc_insertion_point(field_get:nlu.ForestSentence.forest)
  return forest_ != NULL ? *forest_ : *default_instance_->forest_;
}
inline ::nlu::ParseForest* ForestSentence::mutable_forest() {
  
  if (forest_ == NULL) {
    forest_ = new ::nlu::ParseForest;
  }
  // @@protoc_insertion_point(field_mutable:nlu.ForestSentence.forest)
  return forest_;
}
inline ::nlu::ParseForest* ForestSentence::release_forest() {
  
  ::nlu::ParseForest* temp = forest_;
  forest_ = NULL;
  return temp;
}
inline void ForestSentence::set_allocated_forest(::nlu::ParseForest* forest) {
  delete forest_;
  forest_ = forest;
  if (forest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:nlu.ForestSentence.forest)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nlu

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fparse_5fforest_2eproto__INCLUDED
